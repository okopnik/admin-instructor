#!/usr/bin/perl -sl
# By Ben Okopnik 4/27/2014 Version 1.27
# Sanity checker for Hadoop conffile <name> tags
#
# Copyright 2013-2014 Ben Okopnik
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use warnings;
use strict;

# Toggle deprecation warnings (0/1); can be set here or via '/.confcheck -w'
our $w;
my $warn =  $w||0;

# Source file URL
my $source_http = 'http://okopnik.com/Cloudera';

my ($err, $k, %data, %deprecated) = 0;
my $A="\e[7m";			          # 'Standout' (SMSO) mode
my $Z="\e[27m";			          # 'Normal' (RMSO) mode
my $re = qr/([^\011\012\015\040-\176])/;  # "Inverted" list of valid chars

# Get the conf data
die "You need to install 'wget'. Aborting...\n" unless -f '/usr/bin/wget';
my $fetch = qx[/usr/bin/wget -q $source_http/confcheck.data -O -];
die "Fetch failed; check your network connection.\n" if length($fetch) < 1024;

# Name validation pattern
my $pat = qr{(?:[-\w]+\.)+[-\w]+};

# Populate validator hash
for (split /\n/, $fetch){
    chomp;
    next if /^\s*(?:#|$)/;
    # Section headers
    if (m#^(deprecated)\s*$|^(/.*)-(?:site|default)\.xml\s*$#){
        $k = $+;
        next;
    }

    s/^\s*|\s*$//;

    if ($k eq 'deprecated'){
        my ($a, $b);
        die "Incorrect input format in the '$k' section ('$_'); please report to maintainer!\n"
            unless ($a, $b) = /^($pat)\s+(.*)$/;
        $deprecated{$a} = $b;
    }
    else {
        die "Incorrect input format in the '$k' section ('$_'); please report to maintainer!\n"
            unless /^$pat$/;
        # Fully populate both the '-default' and the '-site' versions
        $data{"$k-default.xml"}{$_}++;
        $data{"$k-site.xml"}{$_}++;
    }
}

# Cheat in the impala hdfs-* and core-* pieces
for (keys %{$data{'/etc/hadoop/conf/hdfs-default.xml'}}){
    $data{'/etc/impala/conf/hdfs-default.xml'}{$_}++;
    $data{'/etc/impala/conf/hdfs-site.xml'}{$_}++;
}
for (keys %{$data{'/etc/hadoop/conf/core-default.xml'}}){
    $data{'/etc/impala/conf/core-default.xml'}{$_}++;
    $data{'/etc/impala/conf/core-site.xml'}{$_}++;
}

sub validate {
    my $fn = shift;
    my $xml = shift;
    die "'$fn' contains no data\n" unless $xml;

    # Get rid of comments
    $xml =~ s/<!--.*?-->//gsm;

    my @lines = split /\n/, $xml;

    if ($xml !~ s#\s*<configuration>(.*)</configuration>\s*#$1#ms){
        print "'$fn':\t\tMissing '<configuration>' entity!";
        $err++;
    }

    my $valid = join '\b|\b', keys %{$data{$fn}};
    my $dep = join '\b|\b', keys %deprecated;

    # Check names for validity and deprecation; check all for non-ASCII chars
    for (0..$#lines){
        if ($lines[$_] =~ m{<name>([^<>]+)</name>}){
            my $n = $1;
            if ($n =~ /\b$valid\b/){
                print "Valid entry for '$n'" if $warn;
            }
            elsif ($n =~ /\b$dep\b/){
                print "Deprecated (but still valid) entry for '$n'" if $warn;
            }
            else {
                print "'$fn', line ",$_+1,":\tinvalid name ('$n')";
                $err++;
            }
       }
       # Spotlight 'weird' characters
       if ($lines[$_] =~ s/$re/"$A\\" . sprintf("0x%02x", ord $1) . $Z/eg){
           print "'$fn', line ",$_+1,": $lines[$_]";
           $err++;
       }
    }

    ################# Structure check ########################
    # Get rid of headers
    $xml =~ s/\s*<\?xml[^<>]+\?>\s*//gs;

    # Handle the exceptions to the rule...
    my $search = '<property>\s*<name>dfs\.ha\.fencing\.methods</name>\s*<value>[^<>]+</value>\s*</property>';
    $xml =~ s#\A\s*$search|$search\s*\Z##s;
    $search = '<property>\s*<name>yarn\.application\.classpath</name>\s*<value>[^<>]+</value>\s*</property>';
    $xml =~ s#\s*$search\s*##s;

    # Remove all correctly-structured "paragraphs"
    $search = qr{<property>\s*(?:<description>[^<>]+</description>\s*)?\s*<name>[^<>\s]+</name>\s*<value>[^<>\s]+</value>\s*(?:<description>[^<>]+</description>\s*)?</property>};
    1 while $xml =~ s#\A\s*$search|$search\s*\Z##s;

    # "Once you eliminate the impossible, whatever remains, no matter how improbable, must be the truth."
    if ($xml =~ /\S/){
        print "\n **** Structural or whitespace error(s) in '$fn' ****\n$xml";
        $err++;
    }
}

##################### Main section #############################
my @fchecked;
my $depr = 0;
for my $file (keys %data){
    printf "Checking for '$file'... " if $warn;
    print -f $file ? "found." : "not found." if $warn;
    next unless -f $file;
    push @fchecked, $file;
    open my $Fh, '<', $file or die "$file: $!\n";
    my $xml = my $content = do { local $/; <$Fh>; };
    close $Fh;

    validate($file, $xml);
}

if ($warn){
    $" = "\n\t";
    print $err?"$err":"No", " property name error", $err==1?"":"s", " found in\n\t@fchecked",
        unless @fchecked == 0;
}
else {
    print "\n$err error", $err==1?"":"s", " found." if @fchecked;
}
if ($depr){
    print "\nNOTE: $depr deprecated entries found; rerun with '-w' to see them.\n" unless $warn;
}

